schema {
  query: Query
  mutation: Mutation
}

type ChartRenderData {
  html: String
}

type CreateWidgetMutationHandler {
  dashboard: Dashboard!
  widget: Widget!
}

type Dashboard {
  id: ID!
  created: DateTime!
  modified: DateTime!
  dataset: Dataset!
  name: String!
  widgets: [Widget!]!
}

type Dataset {
  id: ID!
  created: DateTime!
  modified: DateTime!
  name: String!
  isBuilding: Boolean
  sizeMb: Float
  lastBuiltAt: DateTime
  buildDurationSeconds: Int
  tables: [DatasetTable!]!
  dashboardSet: [Dashboard!]!
}

type DatasetTable {
  id: ID!
  dataset: Dataset!
  name: String!
  query: String!
  fields: [DatasetTableFields!]!
  totalRecords: Int
  htmlPreview: String
}

type DatasetTableFields {
  name: String!
  type: String!
}

scalar DateTime

scalar JSONString

type Mutation {
  createDataset(name: String!): Dataset!
  buildDataset(id: ID!): Dataset!
  createDatasetTable(datasetId: ID!, name: String!, query: String!): Dataset
  createDashboard(name: String!, datasetId: ID!): Dashboard!
  createWidget(dashboardId: ID!, layout: WidgetLayoutInput!, widgetType: WidgetType!): CreateWidgetMutationHandler
  updateWidgetBuildInfo(buildInfo: JSONString!, widgetId: ID!): Dashboard
  deleteWidget(widgetId: ID!): Dashboard!
}

type PivotTableRenderData {
  html: String
}

type Query {
  dataset(id: ID!): Dataset!
  datasets: [Dataset!]!
  dashboard(id: ID!): Dashboard!
  dashboards: [Dashboard!]!
}

type Widget {
  id: ID!
  created: DateTime!
  modified: DateTime!
  dashboard: Dashboard!
  type: WidgetType!
  layout: WidgetLayout!
  title: String
  buildInfo: JSONString!
  renderData: WidgetRenderData
}

type WidgetLayout {
  i: ID!
  w: Int!
  h: Int!
  x: Int!
  y: Int!
}

input WidgetLayoutInput {
  i: ID!
  w: Int!
  h: Int!
  x: Int!
  y: Int!
}

union WidgetRenderData = PivotTableRenderData | ChartRenderData

enum WidgetType {
  PIVOT_TABLE
  VERTICAL_BAR_CHART
}
