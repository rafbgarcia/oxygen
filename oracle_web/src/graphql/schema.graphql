schema {
  query: Query
  mutation: Mutation
}

input ColumnInput {
  foreignKeyId: ID
  type: DatasetTableColumnType
}

type CreateWidgetMutationHandler {
  dashboard: Dashboard!
  widget: Widget!
}

type Dashboard {
  id: ID!
  created: DateTime!
  modified: DateTime!
  dataset: Dataset!
  name: String!
  layout: [DashboardLayout]
  widgets: [Widget!]!
}

type DashboardLayout {
  i: ID!
  w: Int!
  h: Int!
  x: Int!
  y: Int!
}

type Dataset {
  id: ID!
  created: DateTime!
  modified: DateTime!
  name: String!
  isBuilding: Boolean
  sizeMb: Decimal
  lastBuiltAt: DateTime
  buildDurationSeconds: Int
  tables: [DatasetTable!]!
  relations: [DatasetRelation!]!
  dashboards: [Dashboard!]!
  filePath: String
}

type DatasetRelation {
  id: ID!
  dataset: Dataset!
  sourceTable: String!
  sourceColumn: String!
  referenceTable: String!
  referenceColumn: String!
  fullSource: String
  fullReference: String
}

type DatasetTable {
  id: ID!
  dataset: Dataset!
  name: String!
  title: String!
  query: String!
  totalRecords: Int
  htmlPreview: String
  columns: [DatasetTableColumn!]!
}

type DatasetTableColumn {
  id: ID!
  name: String!
  type: DatasetTableColumnType!
  table: DatasetTable!
  fullName: String
}

enum DatasetTableColumnType {
  TEXT
  INTEGER
  FLOAT
  DATETIME
}

scalar DateTime

scalar Decimal

scalar JSON

type Mutation {
  createDataset(name: String!): Dataset
  buildDataset(id: ID!): Dataset!
  createDatasetTable(datasetId: ID!, name: String!, query: String!): Dataset
  updateColumn(data: ColumnInput, id: ID!): DatasetTableColumn
  updateRelation(currentRelationId: ID, datasetId: ID, fullReference: String, fullSource: String): DatasetRelation
  deleteRelation(relationId: ID!): Boolean
  createDashboard(name: String!, datasetId: ID!): Dashboard!
  createWidget(buildInfo: JSON!, dashboardId: ID!, layout: WidgetLayoutInput!, widgetType: WidgetType!): CreateWidgetMutationHandler
  updateWidgetBuildInfo(buildInfo: JSON!, widgetId: ID!): Widget
  deleteWidget(widgetId: ID!): Dashboard!
  updateDashboardLayout(dashboardId: ID!, layout: JSON!): Dashboard!
}

type Query {
  dataset(id: ID!): Dataset!
  datasets: [Dataset!]!
  dashboard(id: ID!): Dashboard!
  dashboards: [Dashboard!]!
  widget(build: JSON!, dataset: JSON!, type: WidgetType!): JSON
}

type Widget {
  id: ID!
  created: DateTime!
  modified: DateTime!
  dashboard: Dashboard!
  type: WidgetType!
  buildInfo: JSON
}

input WidgetLayoutInput {
  w: Int!
  h: Int!
  x: Int!
  y: Int!
}

enum WidgetType {
  TEXT
  PIVOT_TABLE
  VERTICAL_BAR_CHART
}
